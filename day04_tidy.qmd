---
title: "Reproducible Data Analysis Day 3: Data loading and tidying with tidyverse"
format: gfm
---

### Learning Objectives

By the end of this class, you should

- Be able to load data into R
- Be able to use the six main data frame manipulation functions (and pipes) in  `dplyr`
- Understand how `group_by()` and `summarize()` can be combined to summarize datasets.
- Be able to analyze a subset of data using logical filtering.

## What is data wrangling?

Manipulation of data frames means many things to many researchers: we often
select certain observations (rows) or variables (columns), we often group the
data by a certain variable(s), or we even calculate summary statistics. This is
collectively referred to as "Data Wrangling" (to "wrangle" means to organize
something unruly, like livestock).

## What is the tidyverse?

The first step to using the tidyverse is to install it. You can do this like any
other R package:



It may take a bit more time than usual, since it actually includes **multiple**
packages.

## Create the project

As before, create a new project (let's call it `day04-practice`) to practice today's code in the `data-analysis-course` folder on your Desktop. Also, create a folder called `data_raw` inside the project.
Today we will be loading data from an external file (`gapminder.csv`). Download the file from this link, and put it in the `data_raw` folder in your project: https://www.dropbox.com/s/fdirlsnxlzy53qq/gapminder.csv?dl=0

## Installing and loading packages

For this lesson, we will use functions that are not included in R by default ("Base R"). **Packages** are collections of code that expand R's functionality. There are
nearly 200,000 packages available on CRAN, the biggest repository of R packages.

To install a new package, use the `install.packages()` function, specifying the name of the package in quotation marks. Here, we will install a package called `tidyverse`:

```{r}
#| eval: false
install.packages("tidyverse")
```

Actually the "tidyverse" is a **collection** of R packages
designed for data science, including `readr`(for loading data), `dplyr` (for data manipulation), `ggplot` (for plotting), and others. These
packages are specifically designed to work harmoniously together.
Some of these packages will be covered along this course, but you can find more
complete information here: [https://www.tidyverse.org/](https://www.tidyverse.org/).

You only have to install the package once, which downloads it to your computer. But each time you want to use the package in an R session, you need to load it with the `library()` function, like this: `library(tidyverse)`. Somewhat confusingly, you **don't** need to put the name of the pacakge quotation marks when using `library()`, but you **do** when using `install.packages()`. Also, you can only load one package at a time using `library()`, so if you needed to load multiple packages, you would need to do it like this (this example shows two packages included in `tidyverse`):

```{r}
library(dplyr)
library(ggplot)
```

## Loading data

We can use the `read_csv()` function from the `readr` package included in `tidyverse` to load the data into R.

```
gapminder <- read_csv("data_raw/gapminder.csv")
```

R loads the data as a **dataframe**, also called a "tibble". But what is a dataframe?

## What are data frames?

When we loaded the data into R, it got stored as an object of class **tibble**, which is a special kind of data frame (the difference is not important for our purposes, but you can learn more about tibbles [here](https://tibble.tidyverse.org/)). Data frames are the *de facto* data structure for most tabular data, and what we use for statistics and plotting. Data frames can be created by hand, but most commonly they are generated by functions like `read_csv()`; in other words, when importing spreadsheets from your hard drive or the web.

A data frame is the representation of data in the format of a table where the columns are vectors that all have the same length. Because columns are vectors, each column must contain a single type of data (e.g., characters, integers, factors). For example, here is a figure depicting a data frame comprising a numeric, a character, and a logical vector.

![](images/dataframe.png)

## Inspect the data

You can see the contents of a dataframe by typing its name in the R console:

```
gapminder
```

R gives you some useful summary information: the number of rows (1,704) and columns (6) and the type of each column (`chr` is character, `dbl` is numeric).

## Attributions

These materials were modified by Joel H. Nitta from those posted at
https://swcarpentry.github.io/r-novice-gapminder/ and https://datacarpentry.org/R-ecology-lesson under the 
[Creative Commons Attribution (CC BY 4.0) license](https://creativecommons.org/licenses/by/4.0/).
